@model Revision
@{
    ViewData["Title"] = "Create Revision";
    Layout = "~/Views/Shared/instructorLayout.cshtml";

    // Handle null ViewBag.Courses safely
   

}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Display status messages -->
            

            <div class="card shadow-sm my-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0 text-center"><i class="fas fa-book me-2"></i>Create New Revision</h3>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" class="needs-validation" novalidate>
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <!-- Title -->
                        <div class="mb-3">
                            <label asp-for="Title" class="form-label required">Title</label>
                            <input asp-for="Title" class="form-control" placeholder="Enter revision title" required />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <!-- Supporting Files -->
                        <div class="mb-3">
                            <label asp-for="SupportingFiles" class="form-label">Supporting Files</label>
                            <textarea asp-for="SupportingFiles" class="form-control" rows="3"
                                      placeholder="Enter file paths or descriptions (separate multiple files with commas)"></textarea>
                            <span asp-validation-for="SupportingFiles" class="text-danger"></span>
                        </div>

                        <!-- Video URL -->
                        <div class="mb-3">
                            <label asp-for="VideoURL" class="form-label">Video URL</label>
                            <input asp-for="VideoURL" type="url" class="form-control"
                                   placeholder="https://example.com/video" />
                            <span asp-validation-for="VideoURL" class="text-danger"></span>
                        </div>

                        <!-- Schedule Date -->
                        <div class="mb-3">
                            <label asp-for="ScheduleDate" class="form-label">Schedule Date</label>
                            <input asp-for="ScheduleDate" type="datetime-local" class="form-control" />
                            <span asp-validation-for="ScheduleDate" class="text-danger"></span>
                        </div>

                        <!-- Course Selection -->
                        <div class="mb-3">
                            <label asp-for="CourseID" class="form-label required">Course</label>
                            <select asp-for="CourseID" asp-items="@courses" class="form-select" required>
                                <option value="">-- Select Course --</option>
                            </select>
                            <span asp-validation-for="CourseID" class="text-danger"></span>
                        </div>

                        <!-- Form Buttons -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                            <button type="submit" class="btn btn-primary me-md-2">
                                <i class="fas fa-save me-1"></i>Create Revision
                            </button>
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-times me-1"></i>Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Client-side validation
        document.addEventListener('DOMContentLoaded', function() {
            // Enable Bootstrap validation
            (function () {
                'use strict'
                const forms = document.querySelectorAll('.needs-validation')
                Array.from(forms).forEach(form => {
                    form.addEventListener('submit', event => {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }
                        form.classList.add('was-validated')
                    }, false)
                })
            })()

            // Auto-close alerts after 5 seconds
            setTimeout(() => {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(alert => {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                });
            }, 5000);
        });
    </script>
}

<style>
    .form-control, .form-select {
        border-radius: 0.375rem;
        padding: 0.5rem 1rem;
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .required:after {
        content: " *";
        color: #dc3545;
    }

    .card {
        border: none;
        border-radius: 0.5rem;
    }

    .card-header {
        border-radius: 0.5rem 0.5rem 0 0 !important;
    }
</style>